version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: ptm-app
    ports:
      - "8080:8080"
      - "40000:40000"
    environment:
      DEBUG: "false"
      APP_ENV: docker
      APP_PORT: 8080
      DATABASE_URL: ${DOCKER_DATABASE_URL}
      REDIS_ADDR: ${DOCKER_REDIS_ADDR}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://telemetry:4317
      OTEL_RESOURCE_ATTRIBUTES: service.name=ptm-app
      OTEL_TRACES_SAMPLER: always_on
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: ptm-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ptmdb
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./configs/dbconfig/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./configs/dbconfig/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: ptm-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-replica:
    image: postgres:15
    container_name: ptm-postgres-replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./postgres-replica:/var/lib/postgresql/data
    command: >
      bash -c "
        until pg_isready -h db -U postgres; do sleep 1; done &&
        pg_basebackup -h db -D /var/lib/postgresql/data -U postgres -Fp -Xs -P -R &&
        echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf &&
        exec postgres"

  nginx:
    image: nginx:latest
    container_name: ptm-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus